generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  lastName          String
  email             String           @unique
  type              UserType         @default(Member)
  isBlocked         Boolean          @default(false)
  gender            Gender?
  isAdmin           Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  businessId        Int
  imageId           Int?
  customerProfileId Int?             @unique
  dateOfBirth       DateTime?
  firstName         String
  isDeleted         Boolean          @default(false)
  phoneId           Int?
  supabaseId        String?          @unique
  isSuperAdmin      Boolean          @default(false)
  AuditLog          AuditLog[]
  courierProfile    CourierProfile?
  driverProfile     DriverProfile?
  business          Business         @relation(fields: [businessId], references: [id])
  customerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  imageUrl          Image?           @relation(fields: [imageId], references: [id])
  phoneNumber       Phone?           @relation(fields: [phoneId], references: [id])

  @@index([businessId])
}

model AuthProfile {
  id         Int       @id @default(autoincrement())
  supabaseId String    @unique
  provider   String
  lastSignIn DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model DriverProfile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int       @unique
  isDeleted Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  journeys  Journey[] @relation("DriverProfileToJourney")
}

model CourierProfile {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           Int             @unique
  courierJourneyId Int?
  isDeleted        Boolean         @default(false)
  courierJourney   CourierJourney? @relation(fields: [courierJourneyId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
}

model Business {
  id               Int               @id @default(autoincrement())
  name             String
  notes            String?
  activationDate   DateTime?
  isActive         Boolean           @default(false)
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  imageId          Int?
  isDeleted        Boolean           @default(false)
  addresses        Address[]
  AuditLog         AuditLog[]
  imageUrl         Image?            @relation(fields: [imageId], references: [id])
  courierJourney   CourierJourney[]
  customerProfiles CustomerProfile[]
  journeys         Journey[]
  parcels          Parcel[]
  tariffs          Tariff[]
  users            User[]
  vehicles         Vehicle[]
}

model CustomerProfile {
  id                Int              @id @default(autoincrement())
  businessId        Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  firstName         String
  gender            Gender
  lastName          String
  note              String?
  isDeleted         Boolean          @default(false)
  novaPostAddressId Int?
  phoneId           Int              @unique
  primaryAddress    Address?
  business          Business         @relation(fields: [businessId], references: [id])
  novaPostAddress   NovaPostAddress? @relation(fields: [novaPostAddressId], references: [id])
  phoneNumber       Phone            @relation(fields: [phoneId], references: [id])
  parcelsReceived   Parcel[]         @relation("receivedParcels")
  parcelsSent       Parcel[]         @relation("sentParcels")
  user              User?
}

model Parcel {
  id                     Int               @id @default(autoincrement())
  weight                 Float
  notes                  String?
  trackingNumber         String
  parcelMoneyAmount      Float?
  isLost                 Boolean           @default(false)
  pickupDate             DateTime          @default(now())
  deliveryDate           DateTime?
  isArchived             Boolean           @default(false)
  price                  Float
  discount               Float?
  discountType           DiscountType      @default(None)
  hasBorderCheck         Boolean           @default(false)
  isDamaged              Boolean           @default(false)
  deliveryStatus         DeliveryStatus    @default(Initial)
  paymentStatus          PaymentStatus     @default(NotPaid)
  paidBy                 PaymentParty      @default(Sender)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  senderId               Int
  businessId             Int
  journeyId              Int?
  recipientId            Int
  courierJourneyId       Int?
  isDeleted              Boolean           @default(false)
  cargoType              ParcelType        @default(Regular)
  cost                   Float
  destinationAddressId   Int
  novaPostAddressId      Int?
  novaPostTrackingNumber String?
  originAddressId        Int
  recipientPhoneNumber   String?
  senderPhoneNumber      String?
  tariffId               Int?
  connectedFrom          ConnectedParcel[] @relation("ConnectedToParcels")
  connections            ConnectedParcel[] @relation("ParcelConnections")
  images                 Image[]
  business               Business          @relation(fields: [businessId], references: [id])
  courierJourney         CourierJourney?   @relation(fields: [courierJourneyId], references: [id])
  destinationAddress     Address           @relation("destinationParcels", fields: [destinationAddressId], references: [id])
  journey                Journey?          @relation(fields: [journeyId], references: [id])
  novaPostAddress        NovaPostAddress?  @relation(fields: [novaPostAddressId], references: [id])
  originAddress          Address           @relation("originParcels", fields: [originAddressId], references: [id])
  recipient              CustomerProfile   @relation("receivedParcels", fields: [recipientId], references: [id])
  sender                 CustomerProfile   @relation("sentParcels", fields: [senderId], references: [id])
  tariff                 Tariff?           @relation(fields: [tariffId], references: [id])
}

model Address {
  id                 Int             @id @default(autoincrement())
  street             String
  city               String
  postcode           String?
  profileId          Int             @unique
  block              String?
  building           String?
  countryId          Int
  flat               String?
  note               String?
  region             String?
  businessId         Int
  business           Business        @relation(fields: [businessId], references: [id])
  country            Country         @relation(fields: [countryId], references: [id])
  profile            CustomerProfile @relation(fields: [profileId], references: [id])
  destinationParcels Parcel[]        @relation("destinationParcels")
  originParcels      Parcel[]        @relation("originParcels")

  @@index([businessId])
}

model Phone {
  id              Int              @id @default(autoincrement())
  number          String
  countryCode     String
  parcelId        Int?
  customerProfile CustomerProfile?
  users           User[]
}

model NovaPostAddress {
  id                 Int               @id @default(autoincrement())
  city               String
  Area               String
  MainDescription    String
  Region             String
  SettlementTypeCode String
  Warehouses         String
  street             String
  customerProfile    CustomerProfile[]
  parcel             Parcel[]
}

model ConnectedParcel {
  id             Int      @id @default(autoincrement())
  parcelId       Int
  connectedToId  Int
  connectionType String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  connectedTo    Parcel   @relation("ConnectedToParcels", fields: [connectedToId], references: [id], onDelete: Cascade, map: "ConnectedParcel_connectedTo_fkey")
  parcel         Parcel   @relation("ParcelConnections", fields: [parcelId], references: [id], map: "ConnectedParcel_parcel_fkey")

  @@unique([parcelId, connectedToId])
  @@index([parcelId])
  @@index([connectedToId])
  @@index([connectionType])
}

model CourierJourney {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isArchived      Boolean          @default(false)
  notes           String?
  departureDate   DateTime
  isCompleted     Boolean          @default(false)
  isDeleted       Boolean          @default(false)
  businessId      Int
  vehicleId       Int
  destination     String
  business        Business         @relation(fields: [businessId], references: [id])
  vehicle         Vehicle          @relation(fields: [vehicleId], references: [id])
  courierProfiles CourierProfile[]
  parcels         Parcel[]
}

model Journey {
  id             Int             @id @default(autoincrement())
  journeyNumber  String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notes          String?
  departureDate  DateTime
  isCompleted    Boolean         @default(false)
  arrivalDate    DateTime?
  vehicleId      Int
  businessId     Int
  isArchived     Boolean         @default(false)
  startCountryId Int
  endCountryId   Int
  hasTrailer     Boolean         @default(false)
  isDeleted      Boolean         @default(false)
  business       Business        @relation(fields: [businessId], references: [id])
  vehicle        Vehicle         @relation(fields: [vehicleId], references: [id])
  startCountry   Country         @relation("JourneyStartCountry", fields: [startCountryId], references: [id])
  endCountry     Country         @relation("JourneyEndCountry", fields: [endCountryId], references: [id])
  parcels        Parcel[]
  driverProfiles DriverProfile[] @relation("DriverProfileToJourney")

  @@index([journeyNumber])
  @@index([businessId, departureDate])
  @@index([startCountryId])
  @@index([endCountryId])
}

model Image {
  id          Int        @id @default(autoincrement())
  url         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vehicleId   Int?
  parcelId    Int?
  businessess Business[]
  parcel      Parcel?    @relation(fields: [parcelId], references: [id])
  vehicle     Vehicle?   @relation(fields: [vehicleId], references: [id])
  users       User[]
}

model Country {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  isoCode      String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  address      Address[]
  journeysFrom Journey[] @relation("JourneyStartCountry")
  journeysTo   Journey[] @relation("JourneyEndCountry")
}

model Vehicle {
  id             Int              @id @default(autoincrement())
  plateNumber    String
  model          String
  make           String
  year           DateTime
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  businessId     Int
  isDeleted      Boolean          @default(false)
  courierJourney CourierJourney[]
  images         Image[]
  journeys       Journey[]
  business       Business         @relation(fields: [businessId], references: [id])
}

model AuditLog {
  id          Int         @id @default(autoincrement())
  userId      Int?
  action      AuditAction
  entityType  String
  entityId    String?
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  method      String?
  endpoint    String?
  requestId   String?
  duration    Int?
  statusCode  Int?
  businessId  Int?
  createdAt   DateTime    @default(now())
  business    Business?   @relation(fields: [businessId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@index([businessId])
}

model Tariff {
  id              Int          @id @default(autoincrement())
  name            String
  description     String?
  minimumPrice    Float
  pricePerKg      Float?
  weightThreshold Float?
  currency        String
  isWeightBased   Boolean      @default(false)
  parcelTypes     ParcelType[]
  isActive        Boolean      @default(true)
  businessId      Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  isDeleted       Boolean      @default(false)
  business        Business     @relation(fields: [businessId], references: [id])
  parcels         Parcel[]

  @@index([businessId])
  @@index([isActive])
}

enum UserType {
  Moderator
  Customer
  Manager
  Member
  InternationalDriver
  ParcelCourier
  Subscriber
}

enum Gender {
  Male
  Female
}

enum ParcelType {
  Regular
  Passport
  Document
  Money
}

enum DiscountType {
  None
  Percentage
  FixedAmount
  Referral
  FirstTimePurchase
}

enum DeliveryStatus {
  Initial
  InProgress
  Delivered
  Cancelled
  Returned
  Lost
}

enum PaymentStatus {
  NotPaid
  PartiallyPaid
  Paid
}

enum PaymentParty {
  Sender
  Recipient
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  SIGNUP
  PASSWORD_CHANGE
  ROLE_CHANGE
  PROFILE_UPDATE
  UPLOAD_FILE
  DOWNLOAD_FILE
  EXPORT_DATA
  IMPORT_DATA
  ARCHIVE
  RESTORE
  APPROVE
  REJECT
  ASSIGN
  UNASSIGN
  CUSTOM
}
