generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keep all your existing enums
enum UserType {
  Moderator
  Customer
  Manager
  Subscriber
  Member
  InternationalDriver
  ParcelCourier
}

enum Gender {
  Male
  Female
}

enum ParcelType {
  Regular
  Passport
  Document
  Money
}

enum DiscountType {
  None
  Percentage
  FixedAmount
  Referral
  FirstTimePurchase
}

enum DeliveryStatus {
  Initial
  InProgress
  Delivered
}

enum PaymentStatus {
  NotPaid
  PartiallyPaid
  Paid
}

// MODIFIED: User model to integrate with Supabase auth
model User {
  id                Int              @id @default(autoincrement())
  // NEW: Link to Supabase auth.users table
  supabaseId        String?          @unique // UUID from auth.users
  firstName         String
  lastName          String
  email             String           @unique
  type              UserType         @default(Member)
  isBlocked         Boolean          @default(false)
  dateOfBirth       DateTime? // Made optional for Google OAuth users
  gender            Gender? // Made optional for Google OAuth users
  isAdmin           Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isDeleted         Boolean          @default(false)
  imageId           Int?
  imageUrl          Image?           @relation(fields: [imageId], references: [id])
  driverProfile     DriverProfile?
  courierProfile    CourierProfile?
  customerProfileId Int?             @unique
  customerProfile   CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  businessId        Int
  business          Business         @relation(fields: [businessId], references: [id])
  phoneId           Int? // Made optional since Google OAuth may not provide phone
  phoneNumber       Phone?           @relation(fields: [phoneId], references: [id])
  AuditLog          AuditLog[]
}

// NEW: Store Supabase auth metadata if needed
model AuthProfile {
  id         Int       @id @default(autoincrement())
  supabaseId String    @unique
  provider   String // 'email' or 'google'
  lastSignIn DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model DriverProfile {
  id        Int       @id @default(autoincrement())
  journeys  Journey[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
}

model CourierProfile {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isDeleted        Boolean         @default(false)
  userId           Int             @unique
  user             User            @relation(fields: [userId], references: [id])
  courierJourneyId Int?
  courierJourney   CourierJourney? @relation(fields: [courierJourneyId], references: [id])
}

model Business {
  id               Int               @id @default(autoincrement())
  name             String
  users            User[]
  vehicles         Vehicle[]
  journeys         Journey[]
  parcels          Parcel[]
  customerProfiles CustomerProfile[]
  notes            String?
  activationDate   DateTime?
  isActive         Boolean           @default(false)
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  imageId          Int?
  imageUrl         Image?            @relation(fields: [imageId], references: [id])
  courierJourney   CourierJourney[]
  isDeleted        Boolean           @default(false)
  AuditLog         AuditLog[]
}

model CustomerProfile {
  id                Int              @id @default(autoincrement())
  firstName         String
  lastName          String
  businessId        Int
  business          Business         @relation(fields: [businessId], references: [id])
  parcelsSent       Parcel[]         @relation("sentParcels")
  parcelsReceived   Parcel[]         @relation("receivedParcels")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  gender            Gender
  phoneId           Int              @unique
  phoneNumber       Phone            @relation(fields: [phoneId], references: [id])
  note              String?
  user              User?
  primaryAddress    Address?
  novaPostAddressId Int?
  novaPostAddress   NovaPostAddress? @relation(fields: [novaPostAddressId], references: [id])
  isDeleted         Boolean          @default(false)
}

model Parcel {
  id                     Int               @id @default(autoincrement())
  weight                 Float
  cargoType              ParcelType        @default(Regular)
  notes                  String?
  trackingNumber         String
  novaPostTrackingNumber String?
  parcelMoneyAmount      Float?
  isLost                 Boolean           @default(false)
  pickupDate             DateTime          @default(now())
  deliveryDate           DateTime?
  isArchived             Boolean           @default(false)
  price                  Float
  cost                   Float
  discount               Float?
  senderPhoneNumber      String?
  recipientPhoneNumber   String?
  discountType           DiscountType      @default(None)
  images                 Image[]
  hasBorderCheck         Boolean           @default(false)
  isDamaged              Boolean           @default(false)
  deliveryStatus         DeliveryStatus    @default(Initial)
  paymentStatus          PaymentStatus     @default(NotPaid)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  connections            ConnectedParcel[] @relation("ParcelConnections")
  connectedFrom          ConnectedParcel[] @relation("ConnectedToParcels")
  isDeleted              Boolean           @default(false)
  senderId               Int
  sender                 CustomerProfile   @relation("sentParcels", fields: [senderId], references: [id])
  recipientId            Int
  recipient              CustomerProfile   @relation("receivedParcels", fields: [recipientId], references: [id])
  businessId             Int
  business               Business          @relation(fields: [businessId], references: [id])
  journeyId              Int?
  journey                Journey?          @relation(fields: [journeyId], references: [id])
  courierJourneyId       Int?
  courierJourney         CourierJourney?   @relation(fields: [courierJourneyId], references: [id])
  originAddressId        Int
  originAddress          Address           @relation("originParcels", fields: [originAddressId], references: [id])
  destinationAddressId   Int
  destinationAddress     Address           @relation("destinationParcels", fields: [destinationAddressId], references: [id])
  novaPostAddressId      Int?
  novaPostAddress        NovaPostAddress?  @relation(fields: [novaPostAddressId], references: [id])
  ConnectedParcel        ConnectedParcel[]
}

model Address {
  id                 Int             @id @default(autoincrement())
  street             String
  city               String
  flat               String?
  building           String?
  block              String?
  note               String?
  region             String?
  postcode           String?
  originParcels      Parcel[]        @relation("originParcels")
  destinationParcels Parcel[]        @relation("destinationParcels")
  countryId          Int
  country            Country         @relation(fields: [countryId], references: [id])
  profileId          Int             @unique
  profile            CustomerProfile @relation(fields: [profileId], references: [id])
}

model Phone {
  id              Int              @id @default(autoincrement())
  number          String
  countryCode     String
  users           User[]
  parcelId        Int?
  customerProfile CustomerProfile?
}

model NovaPostAddress {
  id                 Int               @id @default(autoincrement())
  city               String
  street             String
  Warehouses         String
  MainDescription    String
  Area               String
  Region             String
  SettlementTypeCode String
  parcel             Parcel[]
  customerProfile    CustomerProfile[]
}

model ConnectedParcel {
  id             Int      @id @default(autoincrement())
  parcelId       Int
  connectedToId  Int
  connectionType String // "SAME_DESTINATION", "SAME_SENDER", "BULK_SHIPMENT", "MANUAL"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Bidirectional relationships with unique constraint names
  parcel      Parcel @relation("ParcelConnections", fields: [parcelId], references: [id], onDelete: Cascade, map: "ConnectedParcel_parcel_fkey")
  connectedTo Parcel @relation("ConnectedToParcels", fields: [connectedToId], references: [id], onDelete: Cascade, map: "ConnectedParcel_connectedTo_fkey")
  Parcel      Parcel @relation(fields: [parcelId], references: [id])

  @@unique([parcelId, connectedToId])
  @@index([parcelId])
  @@index([connectedToId])
  @@index([connectionType])
}

model CourierJourney {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parcels         Parcel[]
  courierProfiles CourierProfile[]
  isArchived      Boolean          @default(false)
  destination     String
  notes           String?
  departureDate   DateTime
  isCompleted     Boolean          @default(false)
  isDeleted       Boolean          @default(false)
  businessId      Int
  business        Business         @relation(fields: [businessId], references: [id])
  vehicleId       Int
  vehicle         Vehicle          @relation(fields: [vehicleId], references: [id])
}

model Journey {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  startLocation  String
  endLocation    String
  parcels        Parcel[]
  notes          String?
  departureDate  DateTime
  isCompleted    Boolean         @default(false)
  arrivalDate    DateTime?
  vehicleId      Int
  vehicle        Vehicle         @relation(fields: [vehicleId], references: [id])
  businessId     Int
  business       Business        @relation(fields: [businessId], references: [id])
  driverProfiles DriverProfile[]
  isArchived     Boolean         @default(false)
  isDeleted      Boolean         @default(false)
}

model Image {
  id          Int        @id @default(autoincrement())
  url         String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vehicleId   Int?
  vehicle     Vehicle?   @relation(fields: [vehicleId], references: [id])
  parcelId    Int?
  parcel      Parcel?    @relation(fields: [parcelId], references: [id])
  businessess Business[]
  users       User[]
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isoCode   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
}

model Vehicle {
  id             Int              @id @default(autoincrement())
  plateNumber    String
  model          String
  make           String
  year           DateTime
  isActive       Boolean          @default(true)
  images         Image[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  journeys       Journey[]
  courierJourney CourierJourney[]
  businessId     Int
  business       Business         @relation(fields: [businessId], references: [id])
  isDeleted      Boolean          @default(false)
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  SIGNUP
  PASSWORD_CHANGE
  ROLE_CHANGE
  PROFILE_UPDATE
  UPLOAD_FILE
  DOWNLOAD_FILE
  EXPORT_DATA
  IMPORT_DATA
  ARCHIVE
  RESTORE
  APPROVE
  REJECT
  ASSIGN
  UNASSIGN
  CUSTOM
}

model AuditLog {
  id          Int         @id @default(autoincrement())
  userId      Int? // Nullable for system actions or anonymous users
  user        User?       @relation(fields: [userId], references: [id])
  action      AuditAction
  entityType  String // e.g., "User", "Parcel", "Journey"
  entityId    String? // ID of the affected entity (as string for flexibility)
  description String // Human-readable description of the action
  metadata    Json? // Additional data (request body, changed fields, etc.)
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  method      String? // HTTP method (GET, POST, PUT, DELETE)
  endpoint    String? // API endpoint
  requestId   String? // Unique request identifier
  duration    Int? // Request duration in ms
  statusCode  Int? // HTTP status code
  businessId  Int? // For multi-tenant logging
  business    Business?   @relation(fields: [businessId], references: [id])
  createdAt   DateTime    @default(now())

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@index([businessId])
}
